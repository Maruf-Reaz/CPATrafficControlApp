// <auto-generated />
using System;
using CPATCMSApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CPATCMSApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200920104148_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CPATCMSApp.Models.Assignments.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentSlotId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<int>("DeliveryEnd");

                    b.Property<int>("DeliveryStart");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentSlotId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("CPATCMSApp.Models.Assignments.AssignmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssesmentNotice");

                    b.Property<int>("AssignmentId");

                    b.Property<string>("AssignmentType");

                    b.Property<string>("BillOfEntity");

                    b.Property<string>("CartTicket");

                    b.Property<int>("CnFProfileId");

                    b.Property<string>("ContainerNumber");

                    b.Property<string>("ContainerScanCopy");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Dst");

                    b.Property<int>("EstimatedTruckQty");

                    b.Property<string>("ExitNumber");

                    b.Property<double>("Height");

                    b.Property<string>("ImpReg");

                    b.Property<DateTime>("KeepDownTime");

                    b.Property<string>("LineNumber");

                    b.Property<string>("MLO");

                    b.Property<string>("OneStopBill");

                    b.Property<string>("ReleaseOrder");

                    b.Property<string>("Remarks");

                    b.Property<double>("Size");

                    b.Property<int>("Status");

                    b.Property<string>("VerifyNumber");

                    b.Property<string>("Vessel");

                    b.Property<int>("YardId");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("CnFProfileId");

                    b.HasIndex("YardId");

                    b.ToTable("AssignmentItems");
                });

            modelBuilder.Entity("CPATCMSApp.Models.Assignments.AssignmentSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignmentName");

                    b.Property<int>("EndTime");

                    b.Property<int>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("AssignmentSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentName = "Assignment 1 (5 PM)",
                            EndTime = 1700,
                            StartTime = 1001
                        },
                        new
                        {
                            Id = 2,
                            AssignmentName = "Assignment 2 (9 PM)",
                            EndTime = 2100,
                            StartTime = 1701
                        },
                        new
                        {
                            Id = 3,
                            AssignmentName = "Assignment 3 (10 AM)",
                            EndTime = 1000,
                            StartTime = 2101
                        },
                        new
                        {
                            Id = 4,
                            AssignmentName = "Assignment 4 (Special)",
                            EndTime = 1600,
                            StartTime = 1400
                        });
                });

            modelBuilder.Entity("CPATCMSApp.Models.Assignments.TruckEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentItemId");

                    b.Property<DateTime>("EntryDate");

                    b.Property<int>("EntryTime");

                    b.Property<int>("ExitTime");

                    b.Property<int>("LoadingTime");

                    b.Property<int>("Status");

                    b.Property<string>("TruckNumer");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentItemId");

                    b.ToTable("TruckEntities");
                });

            modelBuilder.Entity("CPATCMSApp.Models.CnFs.CnFProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired();

                    b.Property<double>("Balance");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("VerificationNumber");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("CnFProfiles");
                });

            modelBuilder.Entity("CPATCMSApp.Models.CnFs.CnFRegistration", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CnFAddress");

                    b.Property<string>("CnFCode")
                        .IsRequired();

                    b.Property<string>("CnFName")
                        .IsRequired();

                    b.Property<string>("CnFPhoneNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("CnFRegistrations");
                });

            modelBuilder.Entity("CPATCMSApp.Models.Common.Authentication.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a682b56a-6135-4111-a0k0-bdec547e3waz",
                            ConcurrencyStamp = "da9a3b0e-8b6f-8529-71d0-4fd255e23f15",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has All Permissions",
                            Name = "HarbourAndMarine",
                            NormalizedName = "HARBOURANDMARINE"
                        },
                        new
                        {
                            Id = "b793b57a-6135-4221-b0l0-bdec547e3wax",
                            ConcurrencyStamp = "ga9a3b0e-8b6f-9130-67d0-4fd255e23f16",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has All Permissions",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "c814b58b-7456-9332-c0m0-bdec765e3awc",
                            ConcurrencyStamp = "ea9a3b0f-9b5f-7153-81e0-4fd799e23f16",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "Cnf",
                            NormalizedName = "CNF"
                        },
                        new
                        {
                            Id = "d925b59b-7456-1442-d0n0-bdec765e3awv",
                            ConcurrencyStamp = "ea9a3b0f-9b5f-7153-81e0-4fd799e23f17",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "GateSergent",
                            NormalizedName = "GATESERGENT"
                        },
                        new
                        {
                            Id = "e136b60b-7456-2552-e0o0-bdec765e3awb",
                            ConcurrencyStamp = "ea9a3b0f-9b5f-7153-81e0-4fd799e23f18",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "GateAdmin",
                            NormalizedName = "GATEADMIN"
                        },
                        new
                        {
                            Id = "f247b61b-7456-3662-f0p0-bdec765e3awn",
                            ConcurrencyStamp = "ea9a3b0f-9b5f-7153-81e0-4fd799e23f19",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "Yard",
                            NormalizedName = "YARD"
                        },
                        new
                        {
                            Id = "g358b62b-7456-6772-g0q0-bdec765e3awm",
                            ConcurrencyStamp = "ea9a3b0f-9b5f-7153-81e0-4fd799e23f20",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "OneStop",
                            NormalizedName = "ONESTOP"
                        },
                        new
                        {
                            Id = "h469b63b-7456-7882-h0r0-bdec765e3awl",
                            ConcurrencyStamp = "ea9a3b0f-9b5f-7153-81e0-4fd799e23f21",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "Mechanical",
                            NormalizedName = "MECHANICAL"
                        },
                        new
                        {
                            Id = "i571b64b-7456-5992-i0s0-bdec765e3awk",
                            ConcurrencyStamp = "ea9a3b0f-9b5f-7153-81e0-4fd799e23f22",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Viewer Permissions",
                            Name = "TMOffice",
                            NormalizedName = "TMOFFICE"
                        },
                        new
                        {
                            Id = "j693b65b-7456-8112-j0t0-bdec765e3awj",
                            ConcurrencyStamp = "ea9a3b0f-9b5f-7153-81e0-4fd799e23f23",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Viewer Permissions",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("CPATCMSApp.Models.Common.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("GateId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserTypeId");

                    b.Property<int?>("YardId");

                    b.HasKey("Id");

                    b.HasIndex("GateId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserTypeId");

                    b.HasIndex("YardId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "8ab6ee61-f36c-41b1-ae27-dbb23cbfb507",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21881-0a3a-44ab-aa4d-10664ace1e2d",
                            Email = "test@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@MAIL.COM",
                            NormalizedUserName = "HARBOURANDMARINE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJVsHUa611Khzkcg/zXgZ8EeegKhZAyW2eVPMzWJiToPuR45aBwuID99TNJ91JPxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5TDMS5CNA2GYJK2URB4GDOCQI2NI7EHJ",
                            TwoFactorEnabled = false,
                            UserName = "HarbourAndMArine",
                            UserTypeId = 8
                        },
                        new
                        {
                            Id = "8ab6ee62-f37c-42b2-ae27-dbb11cbfb508",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21881-0a3a-44ab-aa4d-10664ace1e2e",
                            Email = "test@mail.com",
                            EmailConfirmed = false,
                            GateId = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@MAIL.COM",
                            NormalizedUserName = "NCYGATEIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJVsHUa611Khzkcg/zXgZ8EeegKhZAyW2eVPMzWJiToPuR45aBwuID99TNJ91JPxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5TDMS5CNA2GYJK2URB4GDOCQI2NI7EHK",
                            TwoFactorEnabled = false,
                            UserName = "NCYGateIn",
                            UserTypeId = 2
                        },
                        new
                        {
                            Id = "8ab6ee63-f38c-43b3-ae27-dbb22cbfb509",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21881-0a3a-44ab-aa4d-10664ace1e2f",
                            Email = "test@mail.com",
                            EmailConfirmed = false,
                            GateId = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@MAIL.COM",
                            NormalizedUserName = "NCYGATEOUT",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJVsHUa611Khzkcg/zXgZ8EeegKhZAyW2eVPMzWJiToPuR45aBwuID99TNJ91JPxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5TDMS5CNA2GYJK2URB4GDOCQI2NI7EPL",
                            TwoFactorEnabled = false,
                            UserName = "NCYGateOut",
                            UserTypeId = 2
                        },
                        new
                        {
                            Id = "8ab6ee64-f39c-44b4-ae27-dbb33cbfb510",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21881-0a3a-44ab-aa4d-10664ace1e2g",
                            Email = "test@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@MAIL.COM",
                            NormalizedUserName = "GATEADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJVsHUa611Khzkcg/zXgZ8EeegKhZAyW2eVPMzWJiToPuR45aBwuID99TNJ91JPxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5TDMS5CNA2GYJK2URB4GDOCQI2NI7EPM",
                            TwoFactorEnabled = false,
                            UserName = "GateAdmin",
                            UserTypeId = 3
                        },
                        new
                        {
                            Id = "8ab6ee65-f40c-45b5-ae27-dbb44cbfb511",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21881-0a3a-44ab-aa4d-10664ace1e2h",
                            Email = "test@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@MAIL.COM",
                            NormalizedUserName = "YARDADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJVsHUa611Khzkcg/zXgZ8EeegKhZAyW2eVPMzWJiToPuR45aBwuID99TNJ91JPxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5TDMS5CNA2GYJK2URB4GDOCQI2NI7EPN",
                            TwoFactorEnabled = false,
                            UserName = "YardAdmin",
                            UserTypeId = 4,
                            YardId = 1
                        },
                        new
                        {
                            Id = "8ab6ee66-f41c-46b6-ae27-dbb55cbfb512",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21881-0a3a-44ab-aa4d-10664ace1e2j",
                            Email = "test@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@MAIL.COM",
                            NormalizedUserName = "ONESTOP",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJVsHUa611Khzkcg/zXgZ8EeegKhZAyW2eVPMzWJiToPuR45aBwuID99TNJ91JPxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5TDMS5CNA2GYJK2URB4GDOCQI2NI7EPP",
                            TwoFactorEnabled = false,
                            UserName = "OneStop",
                            UserTypeId = 5
                        },
                        new
                        {
                            Id = "8ab6ee67-f42c-47b7-ae27-dbb66cbfb513",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21881-0a3a-44ab-aa4d-10664ace1e2k",
                            Email = "test@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@MAIL.COM",
                            NormalizedUserName = "MECHANICAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJVsHUa611Khzkcg/zXgZ8EeegKhZAyW2eVPMzWJiToPuR45aBwuID99TNJ91JPxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5TDMS5CNA2GYJK2URB4GDOCQI2NI7EPQ",
                            TwoFactorEnabled = false,
                            UserName = "Mechanical",
                            UserTypeId = 6
                        },
                        new
                        {
                            Id = "8ab6ee68-f43c-48b8-ae27-dbb77cbfb514",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21881-0a3a-44ab-aa4d-10664ace1e2l",
                            Email = "test@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@MAIL.COM",
                            NormalizedUserName = "TMOFFICE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJVsHUa611Khzkcg/zXgZ8EeegKhZAyW2eVPMzWJiToPuR45aBwuID99TNJ91JPxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5TDMS5CNA2GYJK2URB4GDOCQI2NI7EPR",
                            TwoFactorEnabled = false,
                            UserName = "TMOffice",
                            UserTypeId = 7
                        },
                        new
                        {
                            Id = "8ab6ee69-f44c-49b9-ae27-dbb88cbfb515",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21881-0a3a-44ab-aa4d-10664ace1e2m",
                            Email = "test@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@MAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJVsHUa611Khzkcg/zXgZ8EeegKhZAyW2eVPMzWJiToPuR45aBwuID99TNJ91JPxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5TDMS5CNA2GYJK2URB4GDOCQI2NI7EP3",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            UserTypeId = 9
                        },
                        new
                        {
                            Id = "8ac6ee70-f45c-50b0-ae27-dbb99cbfb516",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21779-1a4a-55ab-aa4d-34567ace1e2n",
                            Email = "neurostorm.soft@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEUROSTORM.SOFT@GMAIL.COM",
                            NormalizedUserName = "NEUROSTORM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOJVsHUa611Khzkcg/zXgZ8EeegKhZAyW2eVPMzWJiToPuR45aBwuID99TNJ91JPxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6VCMS5CNA2GYJI4NET6YGDOCQI2NI7EP4",
                            TwoFactorEnabled = false,
                            UserName = "NeuroStorm",
                            UserTypeId = 10
                        });
                });

            modelBuilder.Entity("CPATCMSApp.Models.Common.Authentication.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CNF"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gate"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gate Admin"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Yard"
                        },
                        new
                        {
                            Id = 5,
                            Name = "One Stop"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Mechanical"
                        },
                        new
                        {
                            Id = 7,
                            Name = "TM Office"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 9,
                            Name = "PaymentAdmin"
                        },
                        new
                        {
                            Id = 10,
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("CPATCMSApp.Models.Currency.BkashMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message");

                    b.HasKey("Id");

                    b.ToTable("BkashMessages");
                });

            modelBuilder.Entity("CPATCMSApp.Models.Currency.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<int>("CnFProfileId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name");

                    b.Property<int>("PaymentMethodId");

                    b.Property<int>("PaymentTypeId");

                    b.Property<string>("ReferenceCode");

                    b.Property<string>("VerificationCode");

                    b.HasKey("Id");

                    b.HasIndex("CnFProfileId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CPATCMSApp.Models.Currency.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "bKash"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rocket"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Nagad"
                        },
                        new
                        {
                            Id = 4,
                            Name = "System"
                        });
                });

            modelBuilder.Entity("CPATCMSApp.Models.Currency.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Recharge"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Revenue"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fine"
                        });
                });

            modelBuilder.Entity("CPATCMSApp.Models.Gates.Gate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gate 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gate 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gate 3"
                        });
                });

            modelBuilder.Entity("CPATCMSApp.Models.TrialAssignments.TrialAssignmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignmentType");

                    b.Property<string>("BlockName");

                    b.Property<string>("CnFCode");

                    b.Property<string>("CnFName");

                    b.Property<string>("ContainerNumber");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("Dst");

                    b.Property<string>("ExitNumber");

                    b.Property<double>("Height");

                    b.Property<string>("ImpReg");

                    b.Property<string>("LineNumber");

                    b.Property<string>("MLO");

                    b.Property<string>("Remarks");

                    b.Property<double>("Size");

                    b.Property<string>("VerifyNumber");

                    b.Property<string>("Vessel");

                    b.Property<int>("YardId");

                    b.HasKey("Id");

                    b.ToTable("TrialAssignmentItems");
                });

            modelBuilder.Entity("CPATCMSApp.Models.Yards.Bay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Bays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GCB"
                        });
                });

            modelBuilder.Entity("CPATCMSApp.Models.Yards.Yard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BayId");

                    b.Property<int?>("GateId");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("OutGateId");

                    b.HasKey("Id");

                    b.HasIndex("BayId");

                    b.HasIndex("GateId");

                    b.HasIndex("OutGateId");

                    b.ToTable("Yards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BayId = 1,
                            GateId = 1,
                            Name = "Yard 1",
                            Number = "1"
                        },
                        new
                        {
                            Id = 2,
                            BayId = 1,
                            GateId = 2,
                            Name = "Yard 2",
                            Number = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "8ab6ee61-f36c-41b1-ae27-dbb23cbfb507",
                            RoleId = "a682b56a-6135-4111-a0k0-bdec547e3waz"
                        },
                        new
                        {
                            UserId = "8ab6ee62-f37c-42b2-ae27-dbb11cbfb508",
                            RoleId = "d925b59b-7456-1442-d0n0-bdec765e3awv"
                        },
                        new
                        {
                            UserId = "8ab6ee63-f38c-43b3-ae27-dbb22cbfb509",
                            RoleId = "d925b59b-7456-1442-d0n0-bdec765e3awv"
                        },
                        new
                        {
                            UserId = "8ab6ee64-f39c-44b4-ae27-dbb33cbfb510",
                            RoleId = "e136b60b-7456-2552-e0o0-bdec765e3awb"
                        },
                        new
                        {
                            UserId = "8ab6ee65-f40c-45b5-ae27-dbb44cbfb511",
                            RoleId = "f247b61b-7456-3662-f0p0-bdec765e3awn"
                        },
                        new
                        {
                            UserId = "8ab6ee66-f41c-46b6-ae27-dbb55cbfb512",
                            RoleId = "g358b62b-7456-6772-g0q0-bdec765e3awm"
                        },
                        new
                        {
                            UserId = "8ab6ee67-f42c-47b7-ae27-dbb66cbfb513",
                            RoleId = "h469b63b-7456-7882-h0r0-bdec765e3awl"
                        },
                        new
                        {
                            UserId = "8ab6ee68-f43c-48b8-ae27-dbb77cbfb514",
                            RoleId = "i571b64b-7456-5992-i0s0-bdec765e3awk"
                        },
                        new
                        {
                            UserId = "8ab6ee69-f44c-49b9-ae27-dbb88cbfb515",
                            RoleId = "j693b65b-7456-8112-j0t0-bdec765e3awj"
                        },
                        new
                        {
                            UserId = "8ac6ee70-f45c-50b0-ae27-dbb99cbfb516",
                            RoleId = "b793b57a-6135-4221-b0l0-bdec547e3wax"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CPATCMSApp.Models.Assignments.Assignment", b =>
                {
                    b.HasOne("CPATCMSApp.Models.Assignments.AssignmentSlot", "AssignmentSlot")
                        .WithMany("Assignments")
                        .HasForeignKey("AssignmentSlotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CPATCMSApp.Models.Assignments.AssignmentItem", b =>
                {
                    b.HasOne("CPATCMSApp.Models.Assignments.Assignment", "Assignment")
                        .WithMany("AssignmentItems")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPATCMSApp.Models.CnFs.CnFProfile", "CnFProfile")
                        .WithMany()
                        .HasForeignKey("CnFProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPATCMSApp.Models.Yards.Yard", "Yard")
                        .WithMany()
                        .HasForeignKey("YardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CPATCMSApp.Models.Assignments.TruckEntity", b =>
                {
                    b.HasOne("CPATCMSApp.Models.Assignments.AssignmentItem", "AssignmentItem")
                        .WithMany("TruckEntities")
                        .HasForeignKey("AssignmentItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CPATCMSApp.Models.CnFs.CnFProfile", b =>
                {
                    b.HasOne("CPATCMSApp.Models.Common.Authentication.ApplicationUser", "ApplicationUser")
                        .WithOne("CnFProfile")
                        .HasForeignKey("CPATCMSApp.Models.CnFs.CnFProfile", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CPATCMSApp.Models.Common.Authentication.ApplicationUser", b =>
                {
                    b.HasOne("CPATCMSApp.Models.Gates.Gate", "Gate")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("GateId");

                    b.HasOne("CPATCMSApp.Models.Common.Authentication.UserType", "UserType")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPATCMSApp.Models.Yards.Yard", "Yard")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("YardId");
                });

            modelBuilder.Entity("CPATCMSApp.Models.Currency.Payment", b =>
                {
                    b.HasOne("CPATCMSApp.Models.CnFs.CnFProfile", "CnFProfile")
                        .WithMany()
                        .HasForeignKey("CnFProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPATCMSApp.Models.Currency.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPATCMSApp.Models.Currency.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CPATCMSApp.Models.Yards.Yard", b =>
                {
                    b.HasOne("CPATCMSApp.Models.Yards.Bay", "Bay")
                        .WithMany("Yards")
                        .HasForeignKey("BayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPATCMSApp.Models.Gates.Gate", "Gate")
                        .WithMany()
                        .HasForeignKey("GateId");

                    b.HasOne("CPATCMSApp.Models.Gates.Gate", "OutGate")
                        .WithMany()
                        .HasForeignKey("OutGateId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CPATCMSApp.Models.Common.Authentication.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CPATCMSApp.Models.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CPATCMSApp.Models.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CPATCMSApp.Models.Common.Authentication.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPATCMSApp.Models.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CPATCMSApp.Models.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
